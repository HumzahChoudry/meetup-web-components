//
// atMediaUpFixed (temporary)
// Replaces existing atMediaUp, adding a breakpoint for "all" that starts at zero
// Rhis is necessary to do "base size" math. "all" is ignored by atMediaUp.
// Maybe there's a smarter way?
//
@mixin atMediaUpFixed($breakpoint){
	@if $breakpoint == small{
		@content
	}
	@else{
		@include atMediaUp($breakpoint){
			@content;
		}
	}
}

//
// responsiveBase
// lets values scale with a "base" unit for each breakpoint
//
@mixin responsiveBase() {
	@each $breakpoint, $thisBase in $breakpointBaseMap {
		// until @content accepts arguments, we have to use a temporary global variable
		// https://github.com/sass/sass/issues/871
		// http://stackoverflow.com/questions/29596968/passing-arguments-from-a-mixin-to-a-content-block

		// base text size
		$base: null !default;
		$oldBase: $base;
		$base: $thisBase !global;

		// base space (for related items)
		$baseSpace: null !default;
		$oldBaseSpace: $baseSpace;
		$baseSpace: $thisBase*$spaceMultiple !global;

		// base space large (for less related items)
		$baseSpaceBig: null !default;
		$oldBaseSpaceBig: $baseSpaceBig;
		$baseSpaceBig: $thisBase*$spaceMultipleBig !global;

		@include atMediaUpFixed($breakpoint) {
			@content
		}

		$base: $oldBase !global;
		$baseSpace: $oldBaseSpace !global;
		$baseSpaceBig: $oldBaseSpaceBig !global;
	}
}

///
/// BP Modifier (temporary)
/// Uses `atMediaUpFixed` instead of `atMediaUp` to
/// generate media-conditional modifier placeholders
/// and classes (ie. `.atMedium_margin--none`).
///
@mixin _bpModifierFixed($base, $modification) {

	@each $breakpoint in (small, medium, large) {

		@include atMediaUpFixed($breakpoint) {
			.at#{str-firstCharToUpper(str-replace($breakpoint, 'small', 'all'))}_#{$base}--#{$modification} {
				@content;
			}
		}

	}

}